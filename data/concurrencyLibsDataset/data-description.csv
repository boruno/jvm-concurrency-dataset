Class,Type,API,Source,Linearizable,Description,Current Test Result,Test Result Description
ArrayBlockingQueue,Data Structure,Blocking,java.util.concurrent,TBD,A bounded blocking queue backed by an array. This queue orders elements FIFO (first-in-first-out),Ignored,Blocking structures are currently unsupported.
AtomicBoolean,Type,N/A,java.util.concurrent,Yes,A boolean value that may be updated atomically,Success,
AtomicInteger,Type,N/A,java.util.concurrent,Yes,An int value that may be updated atomically,Success,
AtomicIntegerArray,Type,Non-blocking,java.util.concurrent,Yes,An int array in which elements may be updated atomically,Success,
AtomicLong,Type,N/A,java.util.concurrent,Yes,A long value that may be updated atomically,Success,
AtomicLongArray,Type,Non-blocking,java.util.concurrent,Yes,A long array in which elements may be updated atomically,Success,
AtomicMarkableReference,Reference,N/A,java.util.concurrent,Yes,An AtomicMarkableReference maintains an object reference along with a mark bit that can be updated atomically,Success,
AtomicReference,Reference,N/A,java.util.concurrent,Yes,An object reference that may be updated atomically,Success,
AtomicReferenceArray,Type,Non-blocking,java.util.concurrent,Yes,An array of object references in which elements may be updated atomically,Success,
AtomicStampedReference,Reference,N/A,java.util.concurrent,Yes,"An AtomicStampedReference maintains an object reference along with an integer ""stamp"" that can be updated atomically",Success,
CompletableFuture,Future,N/A,java.util.concurrent,TBD,A Future that may be explicitly completed (setting its value and status) and may be used as a CompletionStage supporting dependent functions and actions that trigger upon its completion,Ignored,Blocking structures are currently unsupported.
ConcurrentHashMap,Data Structure,Non-blocking,java.util.concurrent,Yes,A hash table supporting full concurrency of retrievals and high expected concurrency for updates,Success,
ConcurrentLinkedDeque,Data Structure,Non-blocking,java.util.concurrent,No,An unbounded concurrent deque based on linked nodes,Success,ConcurrentLinkedDeque is not linearizable.
ConcurrentLinkedQueue,Data Structure,Non-blocking,java.util.concurrent,Yes,An unbounded thread-safe queue based on linked nodes. This queue orders elements FIFO (first-in-first-out),Success,
ConcurrentSkipListMap,Data Structure,Non-blocking,java.util.concurrent,Yes,A scalable concurrent ConcurrentNavigableMap implementation,Success,
ConcurrentSkipListSet,Data Structure,Non-blocking,java.util.concurrent,Yes,A scalable concurrent NavigableSet implementation based on a ConcurrentSkipListMap,Success,
CountDownLatch,Synchronization,Blocking,java.util.concurrent,TBD,A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes,Ignored,Blocking structures are currently unsupported.
CyclicBarrier,Synchronization,Blocking,java.util.concurrent,TBD,A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point,Ignored,Blocking structures are currently unsupported.
DelayQueue,Data Structure,Blocking,java.util.concurrent,TBD,An unbounded blocking queue of Delayed elements in which an element generally becomes eligible for removal when its delay has expired,Ignored,Blocking structures are currently unsupported.
DoubleAccumulator,Object,N/A,java.util.concurrent,No,One or more variables that together maintain a running double value updated using a supplied function,Success,DoubleAccumulator is not linearizable.
DoubleAdder,Object,N/A,java.util.concurrent,No,One or more variables that together maintain an initially zero double sum,Success,DoubleAdder is not linearizable.
Exchanger,Synchronization,Blocking,java.util.concurrent,TBD,A synchronization point at which threads can pair and swap elements within pairs,Ignored,Blocking structures are currently unsupported.
ExecutorCompletionService,Executor,N/A,java.util.concurrent,TBD,A CompletionService that uses a supplied Executor to execute tasks,Ignored,Lincheck currently can't handle dynamic thread creation.
Executors,Executor,N/A,java.util.concurrent,TBD,Factory and utility methods for Executor; ExecutorService; ScheduledExecutorService; ThreadFactory; and Callable classes defined in this package,Ignored,Lincheck currently can't handle dynamic thread creation.
ForkJoinPool,Executor,N/A,java.util.concurrent,TBD,An ExecutorService for running ForkJoinTasks,Ignored,Lincheck currently can't handle dynamic thread creation.
FutureTask,Future,N/A,java.util.concurrent,TBD,A cancellable asynchronous computation,Ignored,Blocking structures are currently unsupported.
LinkedBlockingDeque,Data Structure,Blocking,java.util.concurrent,Yes,An optionally-bounded blocking deque based on linked nodes,Ignored,Blocking structures are currently unsupported.
LinkedBlockingQueue,Data Structure,Blocking,java.util.concurrent,TBD,An optionally-bounded blocking queue based on linked nodes. This queue orders elements FIFO (first-in-first-out),Ignored,Blocking structures are currently unsupported.
LinkedTransferQueue,Data Structure,Blocking,java.util.concurrent,TBD,An unbounded TransferQueue based on linked nodes. This queue orders elements FIFO (first-in-first-out) with respect to any given producer,Ignored,Blocking structures are currently unsupported.
LongAccumulator,Object,N/A,java.util.concurrent,No,One or more variables that together maintain a running long value updated using a supplied function,Success,LongAccumulator is not linearizable.
LongAdder,Object,N/A,java.util.concurrent,No,One or more variables that together maintain an initially zero long sum,Success,LongAdder is not linearizable.
Phaser,Synchronization,Blocking,java.util.concurrent,TBD,A reusable synchronization barrier similar in functionality to CyclicBarrier and CountDownLatch but supporting more flexible usage,Ignored,Blocking structures are currently unsupported.
PriorityBlockingQueue,Data Structure,Blocking,java.util.concurrent,Yes,An unbounded blocking queue that uses the same ordering rules as class PriorityQueue and supplies blocking retrieval operations,Ignored,
ReentrantLock,Lock,N/A,java.util.concurrent,TBD,A reentrant mutual exclusion Lock with the same basic behavior and semantics as the implicit monitor lock accessed using synchronized methods and statements but with extended capabilities,Success,
ReentrantReadWriteLock,Lock,N/A,java.util.concurrent,TBD,An implementation of ReadWriteLock supporting similar semantics to ReentrantLock,Success,
ScheduledThreadPoolExecutor,Executor,N/A,java.util.concurrent,TBD,A ThreadPoolExecutor that can additionally schedule commands to run after a given delay or to execute periodically,Ignored,Lincheck currently can't handle dynamic thread creation.
Semaphore,Synchronization,Blocking,java.util.concurrent,TBD,A counting semaphore,Ignored,Blocking structures are currently unsupported.
StampedLock,Lock,N/A,java.util.concurrent,TBD,A capability-based lock with three modes for controlling read/write access,Success,
SubmissionPublisher,Flow,N/A,java.util.concurrent,Yes,A Publisher that asynchronously issues submitted items to current Subscribers until it is closed,Success,
SynchronousQueue,Data Structure,Blocking,java.util.concurrent,TBD,A blocking queue in which each insert operation must wait for a corresponding remove operation by another thread and vice versa,Ignored,Blocking structures are currently unsupported.
ThreadPerTaskExecutor,Executor,N/A,java.util.concurrent,TBD,An Executor that starts a new thread for each task. The number of threads is unbounded,Ignored,Lincheck currently can't handle dynamic thread creation.
ThreadPoolExecutor,Executor,N/A,java.util.concurrent,TBD,An ExecutorService that executes each submitted task using one of possibly several pooled threads normally configured using Executors factory methods,Ignored,Lincheck currently can't handle dynamic thread creation.
ConcurrentAutoTable,Data Structure,Non-blocking,JCTools,Yes,An auto-resizing table of longs supporting low-contention CAS operations,Success,
FixedSizeStripedLongCounterV6,Counter,N/A,JCTools,TBD,Lock-free implementation of striped counter using CAS primitives,Ignored,It's internal class of JCTools
FixedSizeStripedLongCounterV8,Counter,N/A,JCTools,TBD,Wait-free implementation of striped counter using Java 8 Unsafe intrinsics (lock addq and lock xchg),Ignored,It's internal class of JCTools
MpmcArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Multi-Producer-Multi-Consumer queue based on a ConcurrentCircularArrayQueue,Success,
MpmcAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Multi-Producer-Multi-Consumer queue based on a ConcurrentCircularArrayQueue,Success,
MpmcUnboundedXaddArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPMC array queue which grows unbounded in linked chunks. Differently from MpmcArrayQueue it is designed to provide a better scaling when more producers are concurrently offering,Success,
MpmcUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Multi-Producer-Multi-Consumer queue based on a ConcurrentCircularArrayQueue,Success,
MpscArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Multi-Producer-Single-Consumer queue based on a ConcurrentCircularArrayQueue.,Success,
MpscAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Multi-Producer-Single-Consumer queue based on a ConcurrentCircularArrayQueue.,Success,
MpscBlockingConsumerArrayQueue,Data Structure,Blocking,JCTools,TBD,This is a partial implementation of the BlockingQueue on the consumer side only on top of the mechanics described in BaseMpscLinkedArrayQueue but with the reservation bit used for blocking rather than resizing in this instance.,Ignored,Blocking structures are currently unsupported.
MpscChunkedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks of the initial size.,Success,
MpscChunkedAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks of the initial size.,Success,
MpscChunkedUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks of the initial size.,Success,
MpscCompoundQueue,Data Structure,Non-blocking,JCTools,TBD,Use a set number of parallel MPSC queues to diffuse the contention on tail.,Fail,
MpscGrowableArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks doubling theirs size every time until the full blown backing array is used.,Success,
MpscGrowableAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks doubling theirs size every time until the full blown backing array is used.,Success,
MpscGrowableUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks doubling theirs size every time until the full blown backing array is used.,Success,
MpscLinkedAtomicQueue,Data Structure,Non-blocking,JCTools,Yes,This is a Java port of the MPSC algorithm as presented on 1024 Cores by D. Vyukov. The original has been adapted to Java and it's quirks with regards to memory model and layout.,Success,
MpscLinkedQueue,Data Structure,Non-blocking,JCTools,Yes,This is a Java port of the MPSC algorithm as presented on 1024 Cores by D. Vyukov. The original has been adapted to Java and it's quirks with regards to memory model and layout.,Success,
MpscLinkedUnpaddedQueue,Data Structure,Non-blocking,JCTools,Yes,This is a Java port of the MPSC algorithm as presented on 1024 Cores by D. Vyukov. The original has been adapted to Java and it's quirks with regards to memory model and layout.,Success,
MpscUnboundedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows indefinitely in linked chunks of the initial size.,Success,
MpscUnboundedAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows indefinitely in linked chunks of the initial size.,Success,
MpscUnboundedUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which starts at initialCapacity and grows indefinitely in linked chunks of the initial size.,Success,
MpscUnboundedXaddArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An MPSC array queue which grows unbounded in linked chunks. Differently from MpscUnboundedArrayQueue it is designed to provide a better scaling when more producers are concurrently offering.,Success,
MpscUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Multi-Producer-Single-Consumer queue based on a ConcurrentCircularArrayQueue.,Success,
NonBlockingHashMap,Data Structure,Non-blocking,JCTools,Yes,A lock-free alternate implementation of java. util. concurrent. ConcurrentHashMap with better scaling properties and generally lower costs to mutate the Map.,Success,
NonBlockingHashMapLong,Data Structure,Non-blocking,JCTools,TBD,A lock-free alternate implementation of java. util. concurrent. ConcurrentHashMap with primitive long keys better scaling properties and generally lower costs.,Fail,
NonBlockingHashSet,Data Structure,Non-blocking,JCTools,Yes,A simple wrapper around NonBlockingHashMap making it implement the Set interface.,Success,
NonBlockingIdentityHashMap,Data Structure,Non-blocking,JCTools,Yes,A lock-free alternate implementation of java. util. concurrent. ConcurrentHashMap with better scaling properties and generally lower costs to mutate the Map.,Success,
NonBlockingSetInt,Data Structure,Non-blocking,JCTools,Yes,A multi-threaded bit-vector set implemented as an array of primitive longs.,Success,
PaddedAtomicLong,Type,N/A,JCTools,Yes,A padded version of the java. util. concurrent. atomic. AtomicLong,Success,
SpmcArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Single-Producer-Multi-Consumer queue based on a ConcurrentCircularArrayQueue.,Success,
SpmcAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Single-Producer-Multi-Consumer queue based on a ConcurrentCircularArrayQueue.,Success,
SpmcUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Single-Producer-Multi-Consumer queue based on a ConcurrentCircularArrayQueue.,Success,
SpscArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Single-Producer-Single-Consumer queue backed by a pre-allocated buffer.,Success,
SpscAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Single-Producer-Single-Consumer queue backed by a pre-allocated buffer.,Success,
SpscChunkedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks of the initial size.,Success,
SpscChunkedAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks of the initial size.,Success,
SpscChunkedUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks of the initial size.,Success,
SpscGrowableArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks doubling theirs size every time until the full blown backing array is used.,Success,
SpscGrowableAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks doubling theirs size every time until the full blown backing array is used.,Success,
SpscGrowableUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows to maxCapacity in linked chunks doubling theirs size every time until the full blown backing array is used.,Success,
SpscLinkedAtomicQueue,Data Structure,Non-blocking,JCTools,Yes,This is a weakened version of the MPSC algorithm as presented on 1024 Cores by D. Vyukov. The original has been adapted to Java and it's quirks with regards to memory model and layout.,Success,
SpscLinkedQueue,Data Structure,Non-blocking,JCTools,Yes,This is a weakened version of the MPSC algorithm as presented on 1024 Cores by D. Vyukov. The original has been adapted to Java and it's quirks with regards to memory model and layout.,Success,
SpscLinkedUnpaddedQueue,Data Structure,Non-blocking,JCTools,Yes,This is a weakened version of the MPSC algorithm as presented on 1024 Cores by D. Vyukov. The original has been adapted to Java and it's quirks with regards to memory model and layout.,Success,
SpscUnboundedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows indefinitely in linked chunks of the initial size.,Success,
SpscUnboundedAtomicArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows indefinitely in linked chunks of the initial size.,Success,
SpscUnboundedUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,An SPSC array queue which starts at initialCapacity and grows indefinitely in linked chunks of the initial size.,Success,
SpscUnpaddedArrayQueue,Data Structure,Non-blocking,JCTools,Yes,A Single-Producer-Single-Consumer queue backed by a pre-allocated buffer.,Success,
AtomicCounter,Counter,N/A,Agrona,TBD,Atomic counter that is backed by an AtomicBuffer that can be read across threads and processes.,Fail,
ManyToManyConcurrentArrayQueue,Data Structure,Non-blocking,Agrona,Yes,Many producer to many consumer concurrent queue that is array backed. This is a Java port of Dmitry Vyukov's MPMC queue.,Success,
ManyToOneConcurrentArrayQueue,Data Structure,Non-blocking,Agrona,Yes,One producer to one consumer concurrent queue that is array backed. The algorithm is a variation of Fast Flow consumer adapted to work with the Java Memory Model on arrays by using sun.misc.Unsafe.,Success,
ManyToOneConcurrentLinkedQueue,Data Structure,Non-blocking,Agrona,Yes,Many producer to one consumer concurrent queue that is linked list based. This is a Java port of Dmitry Vyukov's MPSC linked queue.,Success,
OneToOneConcurrentArrayQueue,Data Structure,Non-blocking,Agrona,Yes,One producer to one consumer concurrent queue that is array backed. The algorithm is a variation of Fast Flow adapted to work with the Java Memory Model on arrays by using sun.misc.Unsafe.,Success,
AtomicDouble,Type,N/A,Google Guava,Yes,An AtomicDouble is used in place of a Double and is suitable for applications in which the same value will be read and written to by multiple threads.,Success,
AtomicDoubleArray,Data Structure,Non-blocking,Google Guava,Yes,An AtomicDoubleArray is used in place of a double[] and is suitable for applications in which the same array will be read and written to by multiple threads.,Success,
AtomicLongMap,Data Structure,Non-blocking,Google Guava,Yes,A map of longs each associated with a key.,Success,
ConcurrentCombinedMap,Data Structure,Non-blocking,Google Guava,Yes,A ConcurrentMap that combines multiple properties.,Success,
ConcurrentExpiringMap,Data Structure,Non-blocking,Google Guava,Yes,A ConcurrentMap that expires entries after a specified time-to-live.,Success,
ConcurrentMapWithRemovalListener,Data Structure,Non-blocking,Google Guava,Yes,A ConcurrentMap that notifies a listener when an entry is removed.,Success,
ConcurrentSizedMap,Data Structure,Non-blocking,Google Guava,Yes,A ConcurrentMap that maintains a size.,Success,
ConcurrentSoftValuesMap,Data Structure,Non-blocking,Google Guava,Yes,A ConcurrentMap that uses soft references to store its keys.,Success,
ConcurrentWeakKeysMap,Data Structure,Non-blocking,Google Guava,Yes,A ConcurrentMap that uses weak references to store its keys.,Success,
ForwardingBlockingDeque,Data Structure,Blocking,Google Guava,Yes,A BlockingDeque which forwards all its method calls to another BlockingDeque.,Success,
ForwardingBlockingQueue,Data Structure,Blocking,Google Guava,Yes,A BlockingQueue which forwards all its method calls to another BlockingQueue.,Success,
ForwardingLock,Lock,N/A,Google Guava,Yes,A Lock which forwards all its method calls to another Lock.,Success,
ConcurrentRadixTree,Data Structure,Non-blocking,Google Concurrent-trees,No,,Success,
SnapTree,Data Structure,Non-blocking,PPoPP'10,No,,Success,
LogicalOrderingAVL,Data Structure,Non-blocking,PPoPP'14,No,,Success,
CATree,Data Structure,Non-blocking,ISPDC'15,No,,Success,
ConcurrencyOptimalTree,Data Structure,Non-blocking,Euro-Par'17,No,,Success,